tic()
tempdrtmle <- drtmle::drtmle(W=X,A=A,Y=Y,
SL_Q = sl_learners,
SL_g = sl_learners,
SL_Qr = sl_learners,
SL_gr = sl_learners,
a_0=c(1,0))
drtmleests[ss] <- tempdrtmle$drtmle$est[1] - tempdrtmle$drtmle$est[2]
temp <- toc()
}
drcmdests <- rep(NA,100) ; drcmdtimes <- rep(NA,100)
tmleests <- rep(NA,100) ; tmletimes <- rep(NA,100)
aipwests <- rep(NA,100) ; aipwtimes <- rep(NA,100)
drtmleests <- rep(NA,100) ; drtmletimes <- rep(NA,100)
for (ss in 1:100) {
print(ss)
# Simulate data
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X)) ; Y <- rnorm(n) + A + X
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) ; X <- as.data.frame(X)
YY <- Y ; Y[R==0] <- NA
# AIPW
tic()
tempaipw <- AIPW::AIPW$new(Y=Y,A=A,W=X,
Q.SL.library = sl_learners,
g.SL.library = sl_learners,
k_split = k)$fit()$summary()
aipwests[ss] <- tempaipw$estimates$RD[1]
temp <- toc()
aipwtimes[ss] <- temp$toc - temp$tic
# drcmd
tic()
drcmdests[ss] <- drcmd(Y,A,X, hal_ind=hal_ind,
sl_learners = sl_learners,
eem_ind=eem_ind)$results$estimates$psi_hat_ate
temp <- toc()
drcmdtimes[ss] <- temp$toc - temp$tic
# tmle
tic()
tmleests[ss] <- tmle::tmle(Y,A,X, Delta=R,
Q.SL.library = sl_learners,
g.SL.library = sl_learners,
g.Delta.SL.library = sl_learners)$estimates$ATE$psi
temp <- toc()
tmletimes[ss] <- temp$toc - temp$tic
# drtmle
tic()
tempdrtmle <- drtmle::drtmle(W=X,A=A,Y=Y,
SL_Q = sl_learners,
SL_g = sl_learners,
SL_Qr = sl_learners,
SL_gr = sl_learners,
a_0=c(1,0))
drtmleests[ss] <- tempdrtmle$drtmle$est[1] - tempdrtmle$drtmle$est[2]
temp <- toc()
drtmletimes[ss] <- temp$toc - temp$tic
}
# reshape to wide format, removng est from each name
results <- data.frame(drcmdests,tmleests,aipwests,drtmleests) %>%
pivot_longer(cols=everything(),names_to='method',values_to='est') %>%
mutate(method = case_when(method=='drcmdests' ~ 'drcmd',
method=='tmleests' ~ 'tmle',
method=='aipwests' ~ 'AIPW',
method=='drtmleests' ~ 'drtmle'))
results %>% ggplot(aes(x=est,y=method,fill=method)) +
geom_density_ridges(alpha = 0.5,
scale = 1,
rel_min_height = 0.015,
quantile_lines = T,
quantiles = 0.5,
panel_scaling = F) +
theme_bw() +
labs(title='Comparison of DR causal inference packages: estimation',
subtitle='Outcome missing at random conditional on measured covariates',
fill='Package',
x='Estimate of E[Y(1) - Y(0)]',
y='Package') +
theme(legend.position = 'bottom')
# reshape to wide format, removng est from each name
results <- data.frame(drcmdtimes,tmletimes,aipwtimes,drtmletimes) %>%
pivot_longer(cols=everything(),names_to='method',values_to='time') %>%
mutate(method = case_when(method=='drcmdtimes' ~ 'drcmd',
method=='tmletimes' ~ 'tmle',
method=='aipwtimes' ~ 'AIPW',
method=='drtmletimes' ~ 'drtmle'))
results %>% ggplot(aes(x=time,y=method,fill=method)) +
geom_density_ridges(alpha = 0.5,
scale = 1,
rel_min_height = 0.015,
quantile_lines = T,
quantiles = 0.5,
panel_scaling = F) +
theme_bw() +
labs(title='Comparison of DR causal inference packages: time to run',
subtitle='Outcome missing at random conditional on measured covariates',
fill='Package',
x='Time (seconds)',
y='Package') +
theme(legend.position = 'bottom')
results %>% ggplot(aes(x=time,y=method,fill=method)) +
geom_density_ridges(alpha = 0.5,
scale = 1,
rel_min_height = 0.015,
quantile_lines = T,
quantiles = 0.5,
panel_scaling = F) +
theme_bw() +
labs(title='Comparison of DR causal inference packages: time to run',
subtitle='Outcome missing at random conditional on measured covariates',
fill='Package',
x='Time to run (seconds)',
y='Package') +
theme(legend.position = 'bottom')
ggsave('figures/packages_times.pdf',width=8,height=4,units='in')
#-------------------------------------------------------------------------------
results <- drcmd(Y,A,X, hal_ind=hal_ind,
sl_learners = sl_learners,
eem_ind=eem_ind)
results
summary(results)
n <- 1e3
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X)) ; Y <- rnorm(n) + A + X
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) ; X <- as.data.frame(X)
Y[R==0] <- NA # Make Y NA is R==0
df <- data.frame(Y=Y,A=A,X=X,Ystar=Ystar,R=R)
head(df)
res <- drcmd::drcmd(Y=Y, A=A, X=X)
source('../R/utils.R')
source('../R/drcmd.R')
source('../R/nuis.R')
source('../R/methods.R')
res <- drcmd::drcmd(Y=Y, A=A, X=X)
res <- drcmd(Y=Y, A=A, X=X)
res <- drcmd(Y=Y, A=A, X=X,
hal_ind=FALSE,
sl_learners='SL.glm')
summary(results)
res <- drcmd(Y=Y, A=A, X=X,W=as.data.frame(Ystar),
hal_ind=FALSE,
sl_learners='SL.glm')
summary(results)
drcmd(Y=Y, A=A, X=X,W=as.data.frame(Ystar),
hal_ind=FALSE,
sl_learners='SL.glm')
res <- drcmd(Y=Y, A=A, X=X,W=as.data.frame(Ystar),
hal_ind=FALSE,
sl_learners='SL.glm')
summary(res)
summary(res)
res <- drcmd(Y=Y, A=A, X=X,W=as.data.frame(Ystar),
hal_ind=FALSE,
sl_learners='SL.glm')
summary(res)
res <- drcmd(Y=Y, A=A, X=X,
hal_ind=FALSE,
sl_learners='SL.glm')
summary(res)
res <- drcmd(Y=Y, A=A, X=X,
hal_ind=FALSE,
sl_learners='SL.glm')x
res <- drcmd(Y=Y, A=A, X=X,
hal_ind=FALSE,
sl_learners='SL.glm')
getwd()
setwd('../..')
getwd()
setwd('drcmd')
devtools::document
devtools::document()
warnings()
devtools::build_manual()
source("~/Dropbox/drcmd/R/drcmd.R")
# test_funcs.R
# space for testing functions in the drcmd package
#-------------------------------------------------------------------------------
rm(list=ls())
setwd("~/Dropbox/drcmd/tests")
source('../R/utils.R')
source('../R/drcmd.R')
source('../R/nuis.R')
source('../R/methods.R')
hal_ind <- FALSE
eem_ind <- FALSE
sl.lib <- 'SL.glm'
#-------------------------------------------------------------------------------
# Make a couple functions for simming simple data structure
n <- 1e3
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X)) ; Y <- rnorm(n) + A + X
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) ; X <- as.data.frame(X)
# Make Y NA is R==0
Y[R==0] <- NA
df <- data.frame(Y=Y,A=A,X=X,Ystar=Ystar,R=R)
# X = data.frame(cbind(X,X))
W = X[,0]
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=1)
phi_hat
varphi_hat
varphi_hat$varphi_1_hat
class(varphi_hat$varphi_1_hat)
phi_hat
nuisance_ests$kappa_hat
nuisance_ests$m_a_hat
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=1)
phi_hat
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=1)
traceback()
source("~/Dropbox/drcmd/R/nuis.R")
source("~/Dropbox/drcmd/R/utils.R")
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=1)
m_1_hat <- m_a_hat$m_1_hat
m_0_hat <- m_a_hat$m_0_hat
# get fitted values under A=1
phi_1_hat <- m_1_hat + A*(Y - m_1_hat)/g_hat
phi_0_hat <- m_0_hat + (1-A)*(Y - m_0_hat)/(1-g_hat)
# Set values where R==0 to 0
phi_1_hat[R==0] <- 0
phi_0_hat[R==0] <- 0
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=1)
# Form final est for this fold
ests <- est_psi(test, R, Z, nuisance_ests$kappa_hat, phi_hat,varphi_hat)
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=1)
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
res
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
res[1]
Inf
Inf*0
Inf/0
0/0
0!
0/0/0
Inf * 0/0
source("~/Dropbox/drcmd/R/drcmd.R")
source("~/Dropbox/drcmd/R/nuis.R")
source("~/Dropbox/drcmd/R/utils.R")
source("~/Dropbox/drcmd/R/utils.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
res
res[1]
res[1]$nuis
res[[1]]$nuis
source("~/Dropbox/drcmd/R/drcmd.R")
source("~/Dropbox/drcmd/R/nuis.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
res[[1]$nuis]
res[[1]]$nuis$varphi_1_hat
res[[1]]$nuis$varphi_0_hat
source("~/Dropbox/drcmd/R/drcmd.R")
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
res[[1]]
res[[1]]$nuis
res[[1]]$nuis$kappa_hat
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
res[[1]]$nuis
# Extract ests and SEs from each fold
ests_df <- do.call(rbind, lapply(res, function(x) x$ests))
ests_df
average_nuis <- as.data.frame(rowMeans(simplify2array(lapply(res, `[[`, "nuis")), dims = 2))
average_nuis <- as.data.frame(Reduce(`+`, lapply(res, `[[`, "nuis")) / length(res))
average_nuis
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
drcmd_res$results$nuis
source("~/Dropbox/drcmd/R/methods.R")
source("~/Dropbox/drcmd/R/methods.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
plot(drcmd_res)
plot(drcmd_res,type='po')
source("~/Dropbox/drcmd/R/methods.R")
plot(drcmd_res,type='po')
source("~/Dropbox/drcmd/R/methods.R")
plot(drcmd_res,type='po')
mean(drcmd_res$results$nuis$varphi_1_hat)
mean(drcmd_res$results$nuis$phi_1_hat)
mean(drcmd_res$results$nuis$phi_0_hat)
mean(drcmd_res$results$nuis$varphi_0_hat)
source("~/Dropbox/drcmd/R/drcmd.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
source("~/Dropbox/drcmd/R/methods.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
plot(drcmd_Res)
plot(drcmd_res)
nuis
drcmd_res$results$nuis
drcmd_res$results$nuis
source("~/Dropbox/drcmd/R/methods.R")
drcmd_res <- drcmd(Y,A,X, hal_ind=FALSE,sl_learners=sl.lib,eem_ind=TRUE,k=2)
plot(drcmd_res)
source("~/Dropbox/drcmd/R/methods.R")
plot(drcmd_res)
phis <- tidyr::pivot_longer(
nuis,
cols = everything(),
names_to = c(".value", "a"),
names_pattern = "(phi|varphi)_(\\d)_hat"
)
View(phis)
phis <- tidyr::pivot_longer(
nuis,
cols = everything(c('phi_1_hat','phi_0_hat','varphi_1_hat','varphi_0_hat')),
names_to = c(".value", "a"),
names_pattern = "(phi|varphi)_(\\d)_hat"
)
phis <- tidyr::pivot_longer(
nuis,
cols = everything(c('phi_1_hat','phi_0_hat','varphi_1_hat','varphi_0_hat')),
names_to = c(".value", "a"),
names_pattern = "(phi|varphi)_(\\d)_hat"
)
phis <- rbind(data.frame(phi_hat=nuis$phi_1_hat, nuis$varphi_1_hat),A=1,
data.frame(phi_hat=nuis$phi_0_hat, nuis$varphi_0_hat),A=0))
phis <- rbind(data.frame(phi_hat=nuis$phi_1_hat, nuis$varphi_1_hat),A=1,
data.frame(phi_hat=nuis$phi_0_hat, nuis$varphi_0_hat),A=0)
R <- x$R
phis <- rbind(data.frame(phi_hat=nuis$phi_1_hat[R==1], varphi_hat=nuis$varphi_1_hat[R==1]),A=1,
data.frame(phi_hat=nuis$phi_0_hat[R==1], varphi_hatnuis$varphi_0_hat[R==1]),A=0)
phis <- rbind(data.frame(phi_hat=nuis$phi_1_hat[R==1], varphi_hat=nuis$varphi_1_hat[R==1]),A=1,
data.frame(phi_hat=nuis$phi_0_hat[R==1], varphi_hat=nuis$varphi_0_hat[R==1]),A=0)
View(phis)
phis <- rbind(data.frame(phi_hat=nuis$phi_1_hat[R==1], varphi_hat=nuis$varphi_1_hat[R==1],A=1),
data.frame(phi_hat=nuis$phi_0_hat[R==1], varphi_hat=nuis$varphi_0_hat[R==1],A=0))
View(phis)
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=A,color=A)) +
ggplot2::geom_point() +
ggplot2::theme_bw() +
ggplot2::labs(title = "Pseudo Outcome Regression Fit",
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point() +
ggplot2::theme_bw() +
ggplot2::labs(title = "Pseudo Outcome Regression Fit",
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(title = "Pseudo Outcome Regression Fit",
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(title = "Pseudo Outcome Regression Fit",
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit") +
labs(color = "Treatment")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(title = "Pseudo Outcome Regression Fit",
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit") +
ggplot2::labs(color = "Treatment")
ggplot2:theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(title = "Pseudo Outcome Regression Fit",
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit") +
ggplot2::labs(color = "Treatment") +
ggplot2:theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(title = "Pseudo Outcome Regression Fit",
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit") +
ggplot2::labs(color = "Treatment") +
ggplot2::theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "Pseudo Outcome Regression Fit",
subtitle = 'Restricted to complete cases'
x = "Pseudo outcome (full data EIC)",
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "Pseudo Outcome Regression Fit",
subtitle = 'Restricted to complete cases',
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit") +
ggplot2::labs(color = "Treatment") +
ggplot2::theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = phi_hat, y = phi_hat-varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "Pseudo Outcome Regression Fit",
subtitle = 'Restricted to complete cases',
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit") +
ggplot2::labs(color = "Treatment") +
ggplot2::theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = varphi_hat, y = phi_hat-varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "Pseudo Outcome Regression Fit",
subtitle = 'Restricted to complete cases',
x = "Pseudo outcome (full data EIC)",
y = "Psuedo outcome regression fit") +
ggplot2::labs(color = "Treatment") +
ggplot2::theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = varphi_hat, y = phi_hat-varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "Pseudo Outcome Regression Residuals vs Fitted Values",
subtitle = 'Restricted to complete cases',
x = "Pseudo outcome regression residuals",
y = "Psuedo outcome regression fited values") +
ggplot2::labs(color = "Treatment") +
ggplot2::theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = varphi_hat, y = phi_hat-varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.5) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "Pseudo Outcome Regression Residuals vs Fitted Values",
subtitle = 'Restricted to complete cases',
y = "Pseudo outcome regression residuals",
x = "Psuedo outcome regression fited values") +
ggplot2::labs(color = "Treatment") +
ggplot2::theme(legend.position = "bottom")
ggplot2::ggplot(phis,
ggplot2::aes(x = varphi_hat, y = phi_hat-varphi_hat,group=as.factor(A),
color=as.factor(A))) +
ggplot2::geom_point(alpha=0.3) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "Pseudo Outcome Regression Residuals vs Fitted Values",
subtitle = 'Restricted to complete cases',
y = "Pseudo outcome regression residuals",
x = "Psuedo outcome regression fited values") +
ggplot2::labs(color = "Treatment") +
ggplot2::theme(legend.position = "bottom")
j
1
setwd("~/Dropbox/drcmd/demo")
devtools::install_github('keithbarnatchez/drcmd')
# Compare performance of drcmd to tmle, drtmle, and AIPW when outcome is MAR
# (All 4 packages can handle this setting)
#-------------------------------------------------------------------------------
# set up main params
rm(list=ls())
source("~/Dropbox/drcmd/R/nuis.R")
# Compare performance of drcmd to tmle, drtmle, and AIPW when outcome is MAR
# (All 4 packages can handle this setting)
#-------------------------------------------------------------------------------
# set up main params
rm(list=ls())
n <- 1e3
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X)) ; Y <- rnorm(n) + A + X
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X)) ; Y <- rnorm(n) + A + X
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) ; X <- as.data.frame(X)
Y[R==0] <- NA # Make Y NA if R==0
detach(SuperLearner)
df <- data.frame(Y=Y,A=A,X=X,Ystar=Ystar,R=R)
head(df)
res <- drcmd(Y=Y, A=A, X=X,
default_learners='hal')
res <- drcmd::drcmd(Y=Y, A=A, X=X,
default_learners='hal')
summary(res)
res <- drcmd::drcmd(Y=Y, A=A, X=X,
default_learners=c('SL.glm','SL.earth'),
po_learners = 'hal')
res <- drcmd::drcmd(Y=Y, A=A, X=X,
default_learners=c('SL.glm','SL.earth'),
po_learners = 'SL.gam')
summary(res)
summary(res,detail=TRUE)
setwd("~/Dropbox/drcmd/vignettes")
rmarkdown::render("drcmd-vignette.Rmd", output_file = "drcmd-vignette.html")
data(weight_behavior)
