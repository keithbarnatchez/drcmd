k=1,tml=T)
drcmd_res_tml$results$estimates
drcmd_res_tml$results$estimates$psi_hat_ate
drcmd_tml <- drcmd_res_tml$results$estimates$psi_hat_ate
drcmd_tml_int <- compute_CI(drcmd_tml,
drcmd_res_tml$results$ses$psi_hat_ate)
drcmd_tml_cov <- (drcmd_tml_int[1] <= 2.5) & (drcmd_tml_int[2] >= 2.5)
nsim <- 50
registerDoParallel(cores=8)
results <- foreach(1:nsim,.combine=rbind) %dopar% {
# covariates
X <- mvtnorm::rmvnorm(n,
mean=rep(0,3),
sigma=diag(1,3))  # matrix(runif(n*p),nrow=n,ncol=p)
# treatment
probs <- trim(expit(as.matrix(X)%*%delta))
A <- rbinom(nrow(X),size=1,prob = probs)
# outcome
Y <- X%*%beta + tau*A + A*(X%*%gamma) + rnorm(nrow(X),mean=0,sd=1) # exp(rowSums(X)))
# Y <- rbinom(n,1,0.5)
# measurements
Ystar <- Y + X%*%nu + rnorm(nrow(X),mean=0,sd=1)
Astar <- ifelse(runif(length(A)) < 0.8, A, 1 - A)
Rprobs <- expit( -1 + Astar - Ystar/8 - rowSums(X)/2 ) # rho*trim(expit(as.matrix(cbind(X,Astar,Ystar))%*%eta))/mean(trim(expit(as.matrix(cbind(X,Astar,Ystar))%*%eta)))
R <- rbinom(nrow(X),size=1,prob = Rprobs)
X <- as.data.frame(X)
# oracle_aipw <- AIPW::AIPW$new(Y = Y, A=A, W = X,Q.SL.library = 'SL.glm.interaction',
#                               g.SL.library = 'SL.glm.interaction')$fit()$summary()
# oracle_ests <- oracle_aipw$estimates$RD['Estimate']
#
# tmle_res <- tmle::tmle(Y=Y,A=A,W=X,
# g.SL.library=sl_lib,
# Q.SL.library=sl_lib,
# obsWeights=as.double(R/Rprobs))
# tmle_ests <- tmle_res$estimates$ATE$psi
# Make Y NA if R==0
Y[R==0] <- NA
A[R==0] <- NA
drcmd_res_tml <- drcmd(Y,A,X,
W=data.frame(Ystar,Astar),
default_learners= sl_lib,
Rprobs=Rprobs,
po_learners='SL.earth',
k=1,tml=T)
# drcmd_res_tml$results$estimates
drcmd_tml <- drcmd_res_tml$results$estimates$psi_hat_ate
drcmd_tml_int <- compute_CI(drcmd_tml,
drcmd_res_tml$results$ses$psi_hat_ate)
drcmd_tml_cov <- (drcmd_tml_int[1] <= 2.5) & (drcmd_tml_int[2] >= 2.5)
# Estimate with eem
drcmd_res_evm <- drcmd(Y,A,X,
W=data.frame(Ystar,Astar),
default_learners= sl_lib,
r_learners = 'SL.glm',
po_learners='SL.glm',
eem_ind=TRUE,k=1) ; drcmd_res_evm
IF1 <- mean(drcmd_res_evm$results$nuis$m_1_hat) + mean(R/Rprobs*drcmd_res_evm$results$nuis$phi_1_hat)
IF0 <- mean(drcmd_res_evm$results$nuis$m_0_hat) + mean(R/Rprobs*drcmd_res_evm$results$nuis$phi_0_hat)
rw_aipws <- IF1 - IF0
# Estimate without eem
drcmd_res_mid <- drcmd(Y,A,X,
W=data.frame(Ystar,Astar),
default_learners= sl_lib,
r_learners = 'SL.glm',
po_learners = 'SL.mean',
eem_ind=FALSE,k=1,Rprobs=Rprobs)
# evm results
drcmd_evm_ests <- drcmd_res_evm$results$estimates$psi_hat_ate
drcmd_direct_ests <- drcmd_res_evm$results$estimates$psi_hat_ate_direct
temp_int <- compute_CI(drcmd_res_evm$results$estimates$psi_hat_ate,
drcmd_res_evm$results$ses$psi_hat_ate)
drcmd_evm_cov <- (temp_int[1] < 2.5) & (temp_int[2] > 2.5)
# mid results
drcmd_mid_ests <- drcmd_res_mid$results$estimates$psi_hat_ate
temp_int <- compute_CI(drcmd_res_mid$results$estimates$psi_hat_ate,
drcmd_res_mid$results$ses$psi_hat_ate)
drcmd_mid_cov <- (temp_int[1] < 2.5) & (temp_int[2] > 2.5)
return(data.frame(oracle_ests=oracle_ests,drcmd_evm_ests=drcmd_evm_ests,
drcmd_mid_ests=drcmd_mid_ests,
drcmd_direct_ests=drcmd_direct_ests,
tmle_ests=tmle_ests, rw_aipws=rw_aipws,
drcmd_tml=drcmd_res_tml$results$estimates$psi_hat_ate,
drcmd_evm_cov=drcmd_evm_cov,drcmd_mid_cov=drcmd_mid_cov))
}
registerDoParallel(cores=8)
results <- foreach(1:nsim,.combine=rbind) %dopar% {
# covariates
X <- mvtnorm::rmvnorm(n,
mean=rep(0,3),
sigma=diag(1,3))  # matrix(runif(n*p),nrow=n,ncol=p)
# treatment
probs <- trim(expit(as.matrix(X)%*%delta))
A <- rbinom(nrow(X),size=1,prob = probs)
# outcome
Y <- X%*%beta + tau*A + A*(X%*%gamma) + rnorm(nrow(X),mean=0,sd=1) # exp(rowSums(X)))
# Y <- rbinom(n,1,0.5)
# measurements
Ystar <- Y + X%*%nu + rnorm(nrow(X),mean=0,sd=1)
Astar <- ifelse(runif(length(A)) < 0.8, A, 1 - A)
Rprobs <- expit( -1 + Astar - Ystar/8 - rowSums(X)/2 ) # rho*trim(expit(as.matrix(cbind(X,Astar,Ystar))%*%eta))/mean(trim(expit(as.matrix(cbind(X,Astar,Ystar))%*%eta)))
R <- rbinom(nrow(X),size=1,prob = Rprobs)
X <- as.data.frame(X)
oracle_aipw <- AIPW::AIPW$new(Y = Y, A=A, W = X,Q.SL.library = 'SL.glm.interaction',
g.SL.library = 'SL.glm.interaction')$fit()$summary()
oracle_ests <- oracle_aipw$estimates$RD['Estimate']
tmle_res <- tmle::tmle(Y=Y,A=A,W=X,
g.SL.library=sl_lib,
Q.SL.library=sl_lib,
obsWeights=as.double(R/Rprobs))
tmle_ests <- tmle_res$estimates$ATE$psi
# Make Y NA if R==0
Y[R==0] <- NA
A[R==0] <- NA
drcmd_res_tml <- drcmd(Y,A,X,
W=data.frame(Ystar,Astar),
default_learners= sl_lib,
Rprobs=Rprobs,
po_learners='SL.earth',
k=1,tml=T)
# drcmd_res_tml$results$estimates
drcmd_tml <- drcmd_res_tml$results$estimates$psi_hat_ate
drcmd_tml_int <- compute_CI(drcmd_tml,
drcmd_res_tml$results$ses$psi_hat_ate)
drcmd_tml_cov <- (drcmd_tml_int[1] <= 2.5) & (drcmd_tml_int[2] >= 2.5)
# Estimate with eem
drcmd_res_evm <- drcmd(Y,A,X,
W=data.frame(Ystar,Astar),
default_learners= sl_lib,
r_learners = 'SL.glm',
po_learners='SL.glm',
eem_ind=TRUE,k=1) ; drcmd_res_evm
IF1 <- mean(drcmd_res_evm$results$nuis$m_1_hat) + mean(R/Rprobs*drcmd_res_evm$results$nuis$phi_1_hat)
IF0 <- mean(drcmd_res_evm$results$nuis$m_0_hat) + mean(R/Rprobs*drcmd_res_evm$results$nuis$phi_0_hat)
rw_aipws <- IF1 - IF0
# Estimate without eem
drcmd_res_mid <- drcmd(Y,A,X,
W=data.frame(Ystar,Astar),
default_learners= sl_lib,
r_learners = 'SL.glm',
po_learners = 'SL.mean',
eem_ind=FALSE,k=1,Rprobs=Rprobs)
# evm results
drcmd_evm_ests <- drcmd_res_evm$results$estimates$psi_hat_ate
drcmd_direct_ests <- drcmd_res_evm$results$estimates$psi_hat_ate_direct
temp_int <- compute_CI(drcmd_res_evm$results$estimates$psi_hat_ate,
drcmd_res_evm$results$ses$psi_hat_ate)
drcmd_evm_cov <- (temp_int[1] < 2.5) & (temp_int[2] > 2.5)
# mid results
drcmd_mid_ests <- drcmd_res_mid$results$estimates$psi_hat_ate
temp_int <- compute_CI(drcmd_res_mid$results$estimates$psi_hat_ate,
drcmd_res_mid$results$ses$psi_hat_ate)
drcmd_mid_cov <- (temp_int[1] < 2.5) & (temp_int[2] > 2.5)
return(data.frame(oracle_ests=oracle_ests,drcmd_evm_ests=drcmd_evm_ests,
drcmd_mid_ests=drcmd_mid_ests,
drcmd_direct_ests=drcmd_direct_ests,
tmle_ests=tmle_ests, rw_aipws=rw_aipws,
drcmd_tml=drcmd_res_tml$results$estimates$psi_hat_ate,
drcmd_evm_cov=drcmd_evm_cov,drcmd_mid_cov=drcmd_mid_cov))
}
mean(results$oracle_ests)
mean(results$drcmd_evm_ests)
mean(results$drcmd_mid_ests)
mean(results$drcmd_direct_ests)
mean(results$drcmd_tml)
# test_funcs.R
# space for testing functions in the drcmd package
#-------------------------------------------------------------------------------
rm(list=ls())
source('../R/utils.R')
source('../R/drcmd.R')
source('../R/nuis.R')
source('../R/methods.R')
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T)
drcmd_tml
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T) ; drcmd_tml
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
n <- 5000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F) ; drcmd_res
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,cutoff=0) ; drcmd_res
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T,cutoff=0)
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T,cutoff=0)  ; drcmd_tml
drcmd_eem <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=T)
n <- 1000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,cutoff=0) ; drcmd_res
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T,cutoff=0)  ; drcmd_tml
n <- 1000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,cutoff=0) ; drcmd_res
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T,cutoff=0)  ; drcmd_tml
n <- 1000
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rnorm(n) + A + X  # note: true ATE is 1
# Y <- rbinom(n,1,0.5)
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements
X2=X+rnorm(n)
# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)
# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,cutoff=0) ; drcmd_res
drcmd_tml <- drcmd(Y,A,covariates,
default_learners= c('SL.glm','SL.glm.interaction','SL.earth'),
eem_ind=F,tml=T,cutoff=0)  ; drcmd_tml
install.packages('shiny')
