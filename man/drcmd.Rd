% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drcmd.R
\name{drcmd}
\alias{drcmd}
\title{Doubly-robust causal inference with missing data}
\usage{
drcmd(
  Y,
  A,
  X,
  W = NA,
  R = NA,
  default_learners = NULL,
  m_learners = NULL,
  g_learners = NULL,
  r_learners = NULL,
  po_learners = NULL,
  eem_ind = FALSE,
  Rprobs = NA,
  k = 1,
  cutoff = 0.025,
  nboot = 0
)
}
\arguments{
\item{Y}{Outcome variable. Can be continuous or binary}

\item{A}{A binary treatment variable (1=treated, 0=control)}

\item{X}{Dataframe containing baseline covariates}

\item{W}{(optional) Dataframe containing variables solely predictive of missingness,
but not a cause of the outcome or exposure.}

\item{R}{(optional) A character string specifying the missingness indicator,
where 0 indicates missing data. If not specified, the function will create the
missingness indicator by identifying the missingness pattern in the data}

\item{m_learners}{A character vector containing learners to be used for the
outcome regression. User can specify 'hal' or a vector of SuperLearner libraries}

\item{g_learners}{A character vector containing learners to be used for the
propensity score. User can specify 'hal' or a vector of SuperLearner libraries}

\item{r_learners}{A character vector containing learners to be used for the
missingness indicator regression. User can specify 'hal' or a vector of
SuperLearner libraries}

\item{po_learners}{A character vector containing learners to be used for the
pseudo-outcome regression. User can specify 'hal' or a vector of SuperLearner libraries}

\item{eem_ind}{A logical indicating whether to use empirical efficiency maximization}

\item{Rprobs}{A vector of probabilities for the missingness indicator. Only
suitable for study designs where researcher controls mechanism by which variables
are missing (e.g. two-phase sample designs). Defaults to NA, in which case
missingness probabilities are estimated.}

\item{k}{A numeric indicating the number of folds for cross-fitting}

\item{cutoff}{Cutoff for treatment and complete case propensity scores. Estimates outside
of \link{cutoff, 1-cutoff} are set to cutoff or 1-cutoff, respectively}

\item{nboot}{A numeric indicating the number of desired bootstrap samples.
If >0, uses bootstrap to obtain SEs. If =0, uses asymptotic analytical SEs.}

\item{deafult_learners}{A character vector containing SuperLearner libraries to use
for estimating all nuisance functions. User can alternatively specify libraries
for each nuisance function for added flexibility}
}
\value{
An S3 object of class \code{"drcmd"} containing estimation results, information
on the missing data structure, and parameters used in the estimation
\describe{
\item{\code{params}}{A list containing parameters used in the estimation}
\item{\code{Z}}{A character vector containing always-available variables}
\item{\code{R}}{A character vector containing the complete case indicator values}
\item{\code{U}}{A character vector containing partially-missing variables}
\item{\code{results}}{A list of dataframes storing (i) point estimates, (ii)
standard errors, and (iii) nuisance function estimates}
}
}
\description{
Doubly-robust estimation of counterfactual means in the presence of missing
and reports average treatment effects, as well as causal risk ratios and odds ratios
for binary outcomes. General missingness patterns in the data are allowed and automatically
determined by the function -- the only requirement is that any missingness occurs at random
conditional on variables that are always available. For scenarios where non-missingness
probabilities are known, as is common in two-phase sampling designs, users can provide
the non-missingness probabilities through the Rprobs argument. Users can fit nuisance
functions through either highly-adaptive LASSO (HAL) or SuperLearner, the latter of which
the user must specify libraries.
}
\examples{
\dontrun{
n <- 2500
X <- rnorm(n) ; A <- rbinom(n,1,plogis(X))
Y <-  rbinom(n,1,plogis(X-A)) # rnorm(n) + A + X + X^2 + A*X + sin(X) # note: true ATE is 1
Ystar <- Y + rnorm(n)/2 ; R <- rbinom(n,1,plogis(X)) # error-prone outcome measurements

# Make A NA if R==0
A[R==0] <- NA
covariates <- data.frame(X1=X,X2=X2)

# Obtain ATE estimates, fitting all nuisance models with ensemble of splines +
# GAMs (save for the pseudo-outcome regression, which is done with XGboost)
drcmd_res <- drcmd(Y,A,covariates,
                   default_learners= c('SL.gam','SL.earth'),
                   po_learners = 'SL.gam',
                   k=1,
                   eem_ind=F)
}
}
